/***** * TFractalViewerWindow.c * *	Copyright © 1991 Symantec Corporation. All rights reserved. * *		The window methods for the Object Bullseye demo. * *		TBullWindow inherits its Draw method from TWindow. *		TSquareBull and TCircleBull override DrawShape to draw their own kind of bullseye. * *****/#include <Packages.h>			// for NumToString prototype#include "TFractalViewerWindow.h"#include "TPlasma.h"#include <stdlib.h>/**** *	TFractalViewerWindow constructor * *		Create a bullseye window. This constructor relies *		on the TWindow constructor to place the window in *		in attractive place. Then it appends a number to the *		window title. * ****/TPlasma::TPlasma(void){		//	Set the width, and show the window.			SetStyle(5);	Show();}/**** * Hit * *		Handle a mouse down in the window. *		Bullseye window just force a refresh. * ****//**** * DrawShape methods * *		These are the DrawShape methods for *			TBullWindow:	does nothing *			TCircleBull:	Circles *			TSquareBull:	Squares *			TPlasma:	"Triangles" * *		All the DrawShape methods take a drawingRect *		as a parameter. The pen width *		is already set to the appropriate width. * ****/void TPlasma::DrawShape(Rect *drawingRect){	OpenCPicParams	myOpenCPicParams;	PicHandle	myPic;	Rect 	rect;	rect.left = drawingRect->left;	rect.right = drawingRect->right;	rect.top = drawingRect->top;	rect.bottom = drawingRect->bottom;	myOpenCPicParams.srcRect = rect;	myOpenCPicParams.hRes = 0x00480000;	myOpenCPicParams.vRes = 0x00480000;	myOpenCPicParams.version = -2;	myOpenCPicParams.reserved1 = 0;	myOpenCPicParams.reserved2 = 0;		myPic = OpenCPicture(&myOpenCPicParams);		PenSize(style, style);	ClipRect(drawingRect);		while (drawingRect->left < drawingRect->right &&			drawingRect->top  < drawingRect->bottom) {		MoveTo(drawingRect->left, drawingRect->bottom);			LineTo(drawingRect->right, drawingRect->bottom);		LineTo(drawingRect->left, drawingRect->top);		LineTo(drawingRect->left, drawingRect->bottom);		InsetRect(drawingRect, style*2, style*2);	}		ClosePicture();	DrawPicture(myPic, &rect);}//// PREPARE STYLES METHODS////// ZOOM CONTENT//